@page "/profile/{_paramUsername?}/{_paramMode?}"
@using UREstimator.Client.Models
@using UREstimator.Shared
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation

@if (_currentPlayer != null)
{
    <PageTitle>@_currentPlayer.Username</PageTitle>
}
else
{
    <PageTitle>Profile</PageTitle>
}

<MudPaper Class="ma-4 pa-4">
    <EditForm Model="@_model" OnValidSubmit="Submit">
        <DataAnnotationsValidator/>
        <MudGrid Spacing="2" Justify="Justify.SpaceBetween">
            <MudItem xs="12">
                <MudTextField Label="Username" @bind-Value="_model.Username" For="@(() => _model.Username)" />
            </MudItem>
            <MudItem Style="min-width: 150px;">
                <MudSelect @bind-Value="_model.Mode" For="@(() => _model.Mode)" Label="Gamemode">
                    <MudSelectItem Value="@("osu")">osu!</MudSelectItem>
                    <MudSelectItem Value="@("taiko")">Taiko</MudSelectItem>
                    <MudSelectItem Value="@("mania")">Mania</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem>
                <MudButton ButtonType="ButtonType.Submit" Class="mt-1" Variant="Variant.Filled" Disabled="@(_loading)">
                    @if (_loading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Loading...</MudText>
                    }
                    else
                    {
                        <MudText>Calculate</MudText>
                    }
                </MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudPaper>
    
@if (_estimations != null)
{
    <MudPaper Class="ma-4 pa-4">
        <a href="https://osu.ppy.sh/u/@_currentPlayer!.Id" class="d-inline-flex align-center mb-2">
            <MudAvatar Class="mr-2"><MudImage Src="@_currentPlayer.AvatarUrl"/></MudAvatar>
            <MudText Typo="Typo.h4">@_currentPlayer.Username</MudText>
        </a>
        <MudText Typo="Typo.h6">Average profile unstable rate: @_globalEstimation?.ToString("N3")</MudText>
        <MudTooltip Text="Its weighted the same way as profile accuracy">
            <MudText Typo="Typo.h5" Class="mb-2">Average weighted profile unstable rate: @_globalWeightedEstimation?.ToString("N3")</MudText>
        </MudTooltip>
        
        <MudDataGrid Items="@_estimations" Dense="true" Hover="true">
            <Columns>
                <TemplateColumn Title="Map">
                    <CellTemplate>
                        <MudStack Row>
                            <a href="https://osu.ppy.sh/b/@context.Item.BeatmapId">@context.Item.Title</a>
                            @foreach (var mod in @context.Item.Mods)
                            {
                                <MudText Typo="Typo.subtitle2">@mod</MudText>
                            }
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Accuracy" Title="Accuracy" Format="N1" />
                <PropertyColumn Property="x => x.UnstableRate" Title="Unstable rate estimation" Format="N3"/>
                <PropertyColumn Property="x => x.Pp" Title="PP" Format="N1"/>
            </Columns>

        </MudDataGrid>
    </MudPaper>
}

@code {
    private ScoreModel[]? _estimations;
    private Player? _currentPlayer;
    private double? _globalEstimation;
    private double? _globalWeightedEstimation;
    
    private bool _loading;
    
    private readonly Form _model = new();

    [Parameter]
    public string? _paramUsername { get; set; }
    
    [Parameter]
    public string? _paramMode { get; set; }

    private class Form
    {
        [Required(ErrorMessage = "Username is required!")]
        [StringLength(16, MinimumLength = 3, ErrorMessage = "Invalid username length")]
        [RegularExpression(@"^[A-Za-z0-9-\[\]_ ]+$", ErrorMessage = "Invalid username")]
        public string? Username { get; set; }

        [Required]
        public string Mode { get; set; } = "osu";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_paramUsername != null)
        {
            _model.Username = _paramUsername;

            if (_paramMode != null)
            {
                _model.Mode = _paramMode;
            }

            await LoadUser();
        }
    }

    private void Submit(EditContext context)
    {
        StateHasChanged();
        Navigation.NavigateTo($"/profile/{_model.Username}/{_model.Mode}");
    }

    private async Task LoadUser()
    {
        _loading = true;

        var scores = await Http.GetFromJsonAsync<Score[]>($"osuapi/player/{_paramUsername ?? _model.Username}/{_model.Mode}");
        if (scores is { Length: > 0 })
        {
            _currentPlayer = scores[0].User;

            _estimations = scores.Select(x => new ScoreModel
            {
                Mods = x.Mods,
                Title = $"{x.BeatmapSet?.Artist} - {x.BeatmapSet?.Title} [{x.BeatmapShort?.Version}]",
                UnstableRate = Calculator.CalculateDeviation(x),
                BeatmapId = x.BeatmapShort?.Id ?? 0,
                Pp = x.Pp ?? 0,
                Accuracy = x.Accuracy * 100.0
            }).ToArray();

            _globalEstimation = _estimations?.Select(x => x.UnstableRate).Average();

            var index = 0;
            _globalWeightedEstimation = _estimations?.Select(x => x.UnstableRate).Sum(x=> Math.Pow(0.95, index++) * x) / 19.8815894156;
        }
        _loading = false;
    }
}
