@page "/score/{_paramScoreId:long?}/{_paramMode?}"
@using UREstimator.Shared
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Score</PageTitle>

<MudPaper Class="ma-4 pa-4">
    <EditForm Model="@_model" OnValidSubmit="Submit">
        <DataAnnotationsValidator />
        <MudGrid Spacing="2" Justify="Justify.SpaceBetween">
            <MudItem xs="12">
                <MudTextField Label="Score ID"
                              @bind-Value="_model.ScoreId" For="@(() => _model.ScoreId)"
                              InputMode="InputMode.numeric"/>
            </MudItem>
            <MudItem Style="min-width: 150px;">
                <MudSelect @bind-Value="_model.Mode" For="@(() => _model.Mode)" Label="Gamemode">
                    <MudSelectItem Value="@("osu")">osu!</MudSelectItem>
                    <MudSelectItem Value="@("taiko")">Taiko</MudSelectItem>
                    <MudSelectItem Value="@("mania")">Mania</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem>
                <MudButton ButtonType="ButtonType.Submit" Class="mt-1" Variant="Variant.Filled" Disabled="@(_loading)">
                    @if (_loading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Loading...</MudText>
                    }
                    else
                    {
                        <MudText>Calculate</MudText>
                    }
                </MudButton>
            </MudItem>
        </MudGrid>
    </EditForm>
</MudPaper>

@if (_estimation != null && _score != null)
{
    <MudPaper Class="ma-4 pa-4">
        <a href="https://osu.ppy.sh/b/@_score.BeatmapShort?.Id" class="d-inline-flex align-center mb-2">
            <MudAvatar Class="mr-2"><MudImage Src="@_score.BeatmapSet?.Covers?.List"/></MudAvatar>
            <MudText Typo="Typo.h4">@($"{_score.BeatmapSet?.Artist} - {_score.BeatmapSet?.Title} [{_score.BeatmapShort?.Version}]")</MudText>
        </a>
        <MudText Typo="Typo.h5" Class="mb-2">Unstable rate estimation: @_estimation?.ToString("N3")</MudText>
    </MudPaper>
}

@code {
    private bool _loading;

    private double? _estimation;
    private Score? _score;

    private readonly Form _model = new();

    [Parameter]
    public long? _paramScoreId { get; set; }

    [Parameter]
    public string? _paramMode { get; set; }

    private class Form
    {
        [Required(ErrorMessage = "Score ID is required!")]
        public long? ScoreId { get; set; }

        [Required]
        public string Mode { get; set; } = "osu";
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_paramScoreId != null)
        {
            _model.ScoreId = _paramScoreId.Value;

            if (_paramMode != null)
            {
                _model.Mode = _paramMode;
            }

            await LoadScore();
        }
    }

    private void Submit(EditContext context)
    {
        StateHasChanged();
        Navigation.NavigateTo($"/score/{_model.ScoreId}/{_model.Mode}");
    }

    private async Task LoadScore()
    {
        _loading = true;
        var score = await Http.GetFromJsonAsync<Score>($"osuapi/score/{_paramScoreId ?? _model.ScoreId}/{_model.Mode}");

        if (score != null)
        {
            _estimation = Calculator.CalculateDeviation(score);
            _score = score;
        }

        _loading = false;
    }
}
